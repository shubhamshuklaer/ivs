#!/usr/bin/python
import httplib
import sys
import getopt
from urlparse import urlparse
import urllib
import getpass
from ivs_base import ivs
import os
import os.path
from pymongo import Connection
from get_data_for_commits import get_data_for_commits
from bson.json_util import dumps,loads

user_name=""
passwd=""
repo_root=""
repo=ivs()

one_arg_args=["status","delete","log"]
two_arg_args=["init","bare_init","add","push","pull","commit","rm","branch","chkout","rollback"]
three_arg_args=["clone"]
valid_args=[]
valid_args=one_arg_args+two_arg_args
valid_args=valid_args+three_arg_args

db_name=""
mongo_client=None
db=None

def get_repo_root():
    global repo_root
    done=False
    repo_root=""
    cur_dir=os.getcwd()
    while not done:
        if os.path.exists(os.path.join(cur_dir,".ivs")):
            repo_root=os.path.abspath(cur_dir)
            done=True
        else:
            par_dir=os.path.join(cur_dir,os.pardir)
            if os.path.abspath(par_dir) == os.path.abspath(cur_dir):
                done=True
            else:
                cur_dir=par_dir

    if repo_root == "":
        print(os.getcwd()+" or any of its ancestor is a repo")
        sys.exit(2)

    print("Repo root "+repo_root)

def set_repo_param():
    repo.set_path(repo_root)
    repo.set_dbname(db_name)

def get_db_name():
    global db_name
    repo_dir=os.path.join(repo_root,".ivs")
    db_name_file=open(os.path.join(repo_dir,"db_name"))
    db_name=db_name_file.readline().rstrip('\n')

def repo_add():
    repo.add(arg_list[1])

def repo_remove():
    repo.remove(arg_list[1])

def repo_init():
    repo.init()

def repo_bare_init():
    repo.init(True)

def repo_clone():
    get_auth()
    repo_bare_init()
    process(arg_list[2],"pull",get_pull_data,process_pull_data)

def repo_commit():
    repo.commit(arg_list[1])

def repo_status():
    repo.status()

def repo_delete():
    repo.delete()

def get_push_data():
    need_list_str=process(arg_list[1],"get_need",get_pull_data,None)
    if need_list_str != "":
        need_list=loads(need_list_str)
    else:
        need_list=[]
    return get_data_for_commits(db_name,need_list)

def get_pull_data():
    global mongo_client
    global db
    mongo_client=Connection()
    db=mongo_client[db_name]
    list_commit_uids=[]
    for result in db.commits.find({ },{ 'uid': 1, '_id':0 }):
        list_commit_uids.append(result["uid"])
    
    return dumps(list_commit_uids)


def process_pull_data(data):
    global mongo_client
    global db
    mongo_client=Connection()
    db=mongo_client[db_name]

    data_list=loads(data)
    
    print("Processing pull response"+str(data_list))
    
    for entry in data_list["commits"]:
        db.commits.insert(entry)
    
    for entry in data_list["patches"]:
        db.patches.insert(entry)
    
def process_push_data(data):
    print(data)



def process(repo,action,get_data_func,process_data_func):
    message=""
    if get_data_func != None:
        message=get_data_func()

    remote_repo_location=urlparse(repo)
    header={"Content-type": "application/x-www-form-urlencoded","Accept": "text/plain","user":user_name,"passwd":passwd}
    param={"path":remote_repo_location.path,"action":action,"message":message}
    body=urllib.urlencode(param)
    conn=httplib.HTTPSConnection(remote_repo_location.netloc)
    conn.request("POST","",body,header)
    response=conn.getresponse()
    print(response.status,response.reason)
    data=""
    if response.status==200:
        data=response.read()
        print(data)

        if process_data_func !=None:
            process_data_func(data)

    else:
        sys.exit(2)

    return data

def get_auth():
    global user_name
    global passwd

    user_name=raw_input("Enter username: ")
    passwd=getpass.getpass()


try:
    optlist,arg_list=getopt.getopt(sys.argv[1:],"h")
except getopt.GetoptError:
    print("Wrong format type use -h for help")

for opt,arg in optlist:
    if opt=="-h":
        print("Usage")
        print("pull remote_repo")
        print("push remote_repo")
        print("add file or folder or -a")
        print("remove file or folder")
        print("delete")
        print("status")
        print("clone db_name remote_repo")
        print("init db_name")
        print("bare_init db_name")
        print("commit message")
        print("valid args "+str(valid_args))
        sys.exit(0)


if arg_list[0] in valid_args:
    if arg_list[0] in one_arg_args:
        if len(arg_list) !=1:
            print("wrong no of args use -h for help")
            sys.exit(2)
    elif arg_list[0] in three_arg_args:
        if len(arg_list) !=3:
            print("wrong no of args use -h for help")
            sys.exit(2)
    else:
        if len(arg_list) !=2:
            print("wrong no of args use -h for help")
            sys.exit(2)

    if arg_list[0] in ["init","bare_init","clone"]:
        repo_root=os.getcwd()
        db_name=arg_list[1]
        set_repo_param()
        print(repo.get_path(),repo.get_dbname())
        if arg_list[0] == "init":
            repo_init()
        elif arg_list[0] == "bare_init":
            repo_bare_init()
        elif arg_list[0] == "clone":
            repo_clone()

    else:
        get_repo_root()
        get_db_name()
        set_repo_param()
        print(repo.get_path(),repo.get_dbname())

        if arg_list[0] in ["pull","push"]:
            get_auth()
            if arg_list[0] == "pull":
                process(arg_list[1],"pull",get_pull_data,process_pull_data)
            elif arg_list[0] == "push":
                process(arg_list[1],"push",get_push_data,process_push_data)
                pass
        else:
            if arg_list[0] == "add":
                repo_add()
            elif arg_list[0] == "rm":
                repo_remove()
            elif arg_list[0] == "branch":
                repo.create_branch(arg_list[1])
            elif arg_list[0] == "chkout":
                repo.checkout(arg_list[1])
            elif arg_list[0] == "rollback":
                repo.rollback(arg_list[1])
            elif arg_list[0] == "db":
                repo_remove()
            elif arg_list[0] == "commit":
                repo_commit()
            elif arg_list[0] == "status":
                repo_status()
            elif arg_list[0] == "delete":
                repo_delete()
            elif arg_list[0] == "log":
                repo.log()

else:
    print("Wrong argument use -h for help")
    sys.exit(2)

